// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: plugins/authz/authztest/acltest.proto

package authztest

import (
	_ "github.com/dpup/prefab/plugins/authz"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_plugins_authz_authztest_acltest_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_plugins_authz_authztest_acltest_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetDocumentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         string                 `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	DocumentId    string                 `protobuf:"bytes,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDocumentRequest) Reset() {
	*x = GetDocumentRequest{}
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentRequest) ProtoMessage() {}

func (x *GetDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentRequest) Descriptor() ([]byte, []int) {
	return file_plugins_authz_authztest_acltest_proto_rawDescGZIP(), []int{2}
}

func (x *GetDocumentRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetDocumentRequest) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

type GetDocumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body          string                 `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDocumentResponse) Reset() {
	*x = GetDocumentResponse{}
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentResponse) ProtoMessage() {}

func (x *GetDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentResponse.ProtoReflect.Descriptor instead.
func (*GetDocumentResponse) Descriptor() ([]byte, []int) {
	return file_plugins_authz_authztest_acltest_proto_rawDescGZIP(), []int{3}
}

func (x *GetDocumentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDocumentResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetDocumentResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type SaveDocumentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         string                 `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	DocumentId    string                 `protobuf:"bytes,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Body          string                 `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveDocumentRequest) Reset() {
	*x = SaveDocumentRequest{}
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDocumentRequest) ProtoMessage() {}

func (x *SaveDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDocumentRequest.ProtoReflect.Descriptor instead.
func (*SaveDocumentRequest) Descriptor() ([]byte, []int) {
	return file_plugins_authz_authztest_acltest_proto_rawDescGZIP(), []int{4}
}

func (x *SaveDocumentRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SaveDocumentRequest) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *SaveDocumentRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SaveDocumentRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type SaveDocumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body          string                 `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveDocumentResponse) Reset() {
	*x = SaveDocumentResponse{}
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDocumentResponse) ProtoMessage() {}

func (x *SaveDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDocumentResponse.ProtoReflect.Descriptor instead.
func (*SaveDocumentResponse) Descriptor() ([]byte, []int) {
	return file_plugins_authz_authztest_acltest_proto_rawDescGZIP(), []int{5}
}

func (x *SaveDocumentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SaveDocumentResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SaveDocumentResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type ListDocumentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         string                 `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDocumentsRequest) Reset() {
	*x = ListDocumentsRequest{}
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDocumentsRequest) ProtoMessage() {}

func (x *ListDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDocumentsRequest.ProtoReflect.Descriptor instead.
func (*ListDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_plugins_authz_authztest_acltest_proto_rawDescGZIP(), []int{6}
}

func (x *ListDocumentsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ListDocumentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocumentIds   []string               `protobuf:"bytes,1,rep,name=document_ids,json=documentIds,proto3" json:"document_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDocumentsResponse) Reset() {
	*x = ListDocumentsResponse{}
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDocumentsResponse) ProtoMessage() {}

func (x *ListDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_authz_authztest_acltest_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDocumentsResponse.ProtoReflect.Descriptor instead.
func (*ListDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_plugins_authz_authztest_acltest_proto_rawDescGZIP(), []int{7}
}

func (x *ListDocumentsResponse) GetDocumentIds() []string {
	if x != nil {
		return x.DocumentIds
	}
	return nil
}

var File_plugins_authz_authztest_acltest_proto protoreflect.FileDescriptor

var file_plugins_authz_authztest_acltest_proto_rawDesc = string([]byte{
	0x0a, 0x25, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x61, 0x63, 0x6c, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x58, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xb0, 0xb6, 0x18, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xa8, 0xb6, 0x18, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xb0,
	0xb6, 0x18, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xa8, 0xb6, 0x18, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x50, 0x0a, 0x14, 0x53,
	0x61, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x33, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xa8, 0xb6, 0x18, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x32, 0x8f,
	0x07, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x4e, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x62, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61,
	0x62, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0xda, 0xb5, 0x18, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x6c, 0x66, 0x12, 0xac, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4e, 0xda, 0xb5, 0x18, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x69, 0x65, 0x77, 0xe2, 0xb5, 0x18, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0xea, 0xb5, 0x18, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x7b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0xda, 0xb5, 0x18, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0xe2, 0xb5, 0x18, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0xea, 0xb5, 0x18, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x1a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x7b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbd, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0xda, 0xb5, 0x18, 0x13,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0xe2, 0xb5, 0x18, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0xea,
	0xb5, 0x18, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2f, 0x7b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61,
	0x62, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0xda, 0xb5, 0x18,
	0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0xe2,
	0xb5, 0x18, 0x03, 0x6f, 0x72, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x70, 0x75, 0x70, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x74, 0x65,
	0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_plugins_authz_authztest_acltest_proto_rawDescOnce sync.Once
	file_plugins_authz_authztest_acltest_proto_rawDescData []byte
)

func file_plugins_authz_authztest_acltest_proto_rawDescGZIP() []byte {
	file_plugins_authz_authztest_acltest_proto_rawDescOnce.Do(func() {
		file_plugins_authz_authztest_acltest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugins_authz_authztest_acltest_proto_rawDesc), len(file_plugins_authz_authztest_acltest_proto_rawDesc)))
	})
	return file_plugins_authz_authztest_acltest_proto_rawDescData
}

var file_plugins_authz_authztest_acltest_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_plugins_authz_authztest_acltest_proto_goTypes = []any{
	(*Request)(nil),               // 0: prefab.authz_test.Request
	(*Response)(nil),              // 1: prefab.authz_test.Response
	(*GetDocumentRequest)(nil),    // 2: prefab.authz_test.GetDocumentRequest
	(*GetDocumentResponse)(nil),   // 3: prefab.authz_test.GetDocumentResponse
	(*SaveDocumentRequest)(nil),   // 4: prefab.authz_test.SaveDocumentRequest
	(*SaveDocumentResponse)(nil),  // 5: prefab.authz_test.SaveDocumentResponse
	(*ListDocumentsRequest)(nil),  // 6: prefab.authz_test.ListDocumentsRequest
	(*ListDocumentsResponse)(nil), // 7: prefab.authz_test.ListDocumentsResponse
}
var file_plugins_authz_authztest_acltest_proto_depIdxs = []int32{
	0, // 0: prefab.authz_test.AuthzTestService.NoPolicy:input_type -> prefab.authz_test.Request
	0, // 1: prefab.authz_test.AuthzTestService.Self:input_type -> prefab.authz_test.Request
	2, // 2: prefab.authz_test.AuthzTestService.GetDocument:input_type -> prefab.authz_test.GetDocumentRequest
	4, // 3: prefab.authz_test.AuthzTestService.SaveDocument:input_type -> prefab.authz_test.SaveDocumentRequest
	2, // 4: prefab.authz_test.AuthzTestService.GetDocumentTitle:input_type -> prefab.authz_test.GetDocumentRequest
	6, // 5: prefab.authz_test.AuthzTestService.ListDocuments:input_type -> prefab.authz_test.ListDocumentsRequest
	1, // 6: prefab.authz_test.AuthzTestService.NoPolicy:output_type -> prefab.authz_test.Response
	1, // 7: prefab.authz_test.AuthzTestService.Self:output_type -> prefab.authz_test.Response
	3, // 8: prefab.authz_test.AuthzTestService.GetDocument:output_type -> prefab.authz_test.GetDocumentResponse
	5, // 9: prefab.authz_test.AuthzTestService.SaveDocument:output_type -> prefab.authz_test.SaveDocumentResponse
	3, // 10: prefab.authz_test.AuthzTestService.GetDocumentTitle:output_type -> prefab.authz_test.GetDocumentResponse
	7, // 11: prefab.authz_test.AuthzTestService.ListDocuments:output_type -> prefab.authz_test.ListDocumentsResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_plugins_authz_authztest_acltest_proto_init() }
func file_plugins_authz_authztest_acltest_proto_init() {
	if File_plugins_authz_authztest_acltest_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugins_authz_authztest_acltest_proto_rawDesc), len(file_plugins_authz_authztest_acltest_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugins_authz_authztest_acltest_proto_goTypes,
		DependencyIndexes: file_plugins_authz_authztest_acltest_proto_depIdxs,
		MessageInfos:      file_plugins_authz_authztest_acltest_proto_msgTypes,
	}.Build()
	File_plugins_authz_authztest_acltest_proto = out.File
	file_plugins_authz_authztest_acltest_proto_goTypes = nil
	file_plugins_authz_authztest_acltest_proto_depIdxs = nil
}
