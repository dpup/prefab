// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: plugins/authz/authztest/acltest.proto

package authztest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthzTestService_NoPolicy_FullMethodName         = "/prefab.authz_test.AuthzTestService/NoPolicy"
	AuthzTestService_Self_FullMethodName             = "/prefab.authz_test.AuthzTestService/Self"
	AuthzTestService_GetDocument_FullMethodName      = "/prefab.authz_test.AuthzTestService/GetDocument"
	AuthzTestService_SaveDocument_FullMethodName     = "/prefab.authz_test.AuthzTestService/SaveDocument"
	AuthzTestService_GetDocumentTitle_FullMethodName = "/prefab.authz_test.AuthzTestService/GetDocumentTitle"
	AuthzTestService_ListDocuments_FullMethodName    = "/prefab.authz_test.AuthzTestService/ListDocuments"
)

// AuthzTestServiceClient is the client API for AuthzTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthzTestServiceClient interface {
	NoPolicy(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Demonstrated an action only endpoint with no target resource.
	Self(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Demonstrates a standard deny Authz. All users are denied by default, and a
	// policy can be used to allow certain roles to view the document.
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	// Another standard deny Authz, but with a different action.
	SaveDocument(ctx context.Context, in *SaveDocumentRequest, opts ...grpc.CallOption) (*SaveDocumentResponse, error)
	// Demonstrates a default allow Authz. Policies can be used to restrict certain
	// roles from viewing the title.
	GetDocumentTitle(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
}

type authzTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthzTestServiceClient(cc grpc.ClientConnInterface) AuthzTestServiceClient {
	return &authzTestServiceClient{cc}
}

func (c *authzTestServiceClient) NoPolicy(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AuthzTestService_NoPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzTestServiceClient) Self(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AuthzTestService_Self_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzTestServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, AuthzTestService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzTestServiceClient) SaveDocument(ctx context.Context, in *SaveDocumentRequest, opts ...grpc.CallOption) (*SaveDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveDocumentResponse)
	err := c.cc.Invoke(ctx, AuthzTestService_SaveDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzTestServiceClient) GetDocumentTitle(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, AuthzTestService_GetDocumentTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzTestServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, AuthzTestService_ListDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthzTestServiceServer is the server API for AuthzTestService service.
// All implementations must embed UnimplementedAuthzTestServiceServer
// for forward compatibility.
type AuthzTestServiceServer interface {
	NoPolicy(context.Context, *Request) (*Response, error)
	// Demonstrated an action only endpoint with no target resource.
	Self(context.Context, *Request) (*Response, error)
	// Demonstrates a standard deny Authz. All users are denied by default, and a
	// policy can be used to allow certain roles to view the document.
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// Another standard deny Authz, but with a different action.
	SaveDocument(context.Context, *SaveDocumentRequest) (*SaveDocumentResponse, error)
	// Demonstrates a default allow Authz. Policies can be used to restrict certain
	// roles from viewing the title.
	GetDocumentTitle(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	mustEmbedUnimplementedAuthzTestServiceServer()
}

// UnimplementedAuthzTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthzTestServiceServer struct{}

func (UnimplementedAuthzTestServiceServer) NoPolicy(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoPolicy not implemented")
}
func (UnimplementedAuthzTestServiceServer) Self(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Self not implemented")
}
func (UnimplementedAuthzTestServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedAuthzTestServiceServer) SaveDocument(context.Context, *SaveDocumentRequest) (*SaveDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDocument not implemented")
}
func (UnimplementedAuthzTestServiceServer) GetDocumentTitle(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentTitle not implemented")
}
func (UnimplementedAuthzTestServiceServer) ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedAuthzTestServiceServer) mustEmbedUnimplementedAuthzTestServiceServer() {}
func (UnimplementedAuthzTestServiceServer) testEmbeddedByValue()                          {}

// UnsafeAuthzTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthzTestServiceServer will
// result in compilation errors.
type UnsafeAuthzTestServiceServer interface {
	mustEmbedUnimplementedAuthzTestServiceServer()
}

func RegisterAuthzTestServiceServer(s grpc.ServiceRegistrar, srv AuthzTestServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthzTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthzTestService_ServiceDesc, srv)
}

func _AuthzTestService_NoPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzTestServiceServer).NoPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzTestService_NoPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzTestServiceServer).NoPolicy(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzTestService_Self_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzTestServiceServer).Self(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzTestService_Self_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzTestServiceServer).Self(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzTestService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzTestServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzTestService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzTestServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzTestService_SaveDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzTestServiceServer).SaveDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzTestService_SaveDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzTestServiceServer).SaveDocument(ctx, req.(*SaveDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzTestService_GetDocumentTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzTestServiceServer).GetDocumentTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzTestService_GetDocumentTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzTestServiceServer).GetDocumentTitle(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzTestService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzTestServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzTestService_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzTestServiceServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthzTestService_ServiceDesc is the grpc.ServiceDesc for AuthzTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthzTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prefab.authz_test.AuthzTestService",
	HandlerType: (*AuthzTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NoPolicy",
			Handler:    _AuthzTestService_NoPolicy_Handler,
		},
		{
			MethodName: "Self",
			Handler:    _AuthzTestService_Self_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _AuthzTestService_GetDocument_Handler,
		},
		{
			MethodName: "SaveDocument",
			Handler:    _AuthzTestService_SaveDocument_Handler,
		},
		{
			MethodName: "GetDocumentTitle",
			Handler:    _AuthzTestService_GetDocumentTitle_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _AuthzTestService_ListDocuments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins/authz/authztest/acltest.proto",
}
