syntax = "proto3";

package prefab.acl_test;
option go_package = "github.com/dpup/prefab/acl/acltest";

import "google/api/annotations.proto";
import "acl/acl.proto";

service AclTestService {

  rpc NoACL(Request) returns (Response) {
    option (google.api.http) = {
      get: "/api/no-acl"
    };
  }


  // Demonstrated an action only endpoint with no target resource.
  rpc Self(Request) returns (Response) {
    option (prefab.acl.action) = "self.inspect";
    option (google.api.http) = {
      get: "/api/self"
    };
  }

  // Demonstrates a standard deny ACL. All users are denied by default, and a
  // policy can be used to allow certain roles to view the document.
  rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse) {
    option (prefab.acl.action) = "documents.view";
    option (prefab.acl.object_key) = "document";
    option (prefab.acl.default_effect) = "deny";
    
    option (google.api.http) = {
      get: "/api/{org_id}/docs/{document_id}"
    };
  }

  // Another standard deny ACL, but with a different action.
  rpc SaveDocument(SaveDocumentRequest) returns (SaveDocumentResponse) {
    option (prefab.acl.action) = "documents.write";
    option (prefab.acl.object_key) = "document";
    option (prefab.acl.default_effect) = "deny";
    
    option (google.api.http) = {
      put: "/api/{org_id}/docs/{document_id}"
    };
  }

  // Demonstrates a default allow ACL. Policies can be used to restrict certain
  // roles from viewing the title.
  rpc GetDocumentTitle(GetDocumentRequest) returns (GetDocumentResponse) {
    option (prefab.acl.action) = "documents.view_meta";
    option (prefab.acl.object_key) = "document";
    option (prefab.acl.default_effect) = "allow";
    
    option (google.api.http) = {
      get: "/api/{org_id}/docs/{document_id}/title"
    };
  }

  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse) {
    option (prefab.acl.action) = "documents.list";
    option (prefab.acl.object_key) = "org";
    
    option (google.api.http) = {
      get: "/api/{org_id}/docs"
    };
  }
}

message Request {
  string field = 1;
}

message Response {
  bool success = 1;
}

message GetDocumentRequest {
  string org_id = 1 [(prefab.acl.domain_id) = true];
  string document_id = 2 [(prefab.acl.object_id) = true];
}

message GetDocumentResponse {
  string id = 1;
  string title = 2;
  string body = 3;
}

message SaveDocumentRequest {
  string org_id = 1 [(prefab.acl.domain_id) = true];
  string document_id = 2 [(prefab.acl.object_id) = true];
  string title = 3;
  string body = 4;
}

message SaveDocumentResponse {
  string id = 1;
  string title = 2;
  string body = 3;
}

message ListDocumentsRequest {
  string org_id = 1 [(prefab.acl.object_id) = true];
}

message ListDocumentsResponse {
  repeated string document_ids = 1;
}
